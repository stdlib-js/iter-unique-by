{"version":3,"file":"index.mjs","sources":["../lib/main.js"],"sourcesContent":["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2019 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property' ;\nimport isFunction from '@stdlib/assert-is-function' ;\nimport isIteratorLike from '@stdlib/assert-is-iterator-like' ;\nimport iteratorSymbol from '@stdlib/symbol-iterator' ;\nimport format from '@stdlib/error-tools-fmtprodmsg' ;\n\n\n// FUNCTIONS //\n\n/**\n* Tests if a value is unique according to a predicate function when compared to a list of values.\n*\n* @private\n* @param {Array} arr - input array\n* @param {*} v - test value\n* @param {Function} predicate - predicate function\n* @param {*} thisArg - evaluation context\n* @returns {boolean} boolean indicating whether a value is \"unique\"\n*\n* @example\n* function predicate( a, b ) {\n*     return ( a !== b );\n* }\n*\n* var bool = isUnique( [ 1, 2, 3 ], 1, predicate, null );\n* // returns false\n*\n* bool = isUnique( [ 1, 2, 3 ], 4, predicate, null );\n* // returns true\n*/\nfunction isUnique( arr, v, predicate, thisArg ) {\n\tvar len;\n\tvar i;\n\n\tlen = arr.length;\n\tfor ( i = 0; i < len; i++ ) {\n\t\tif ( !predicate.call( thisArg, arr[ i ], v ) ) {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\n\n\n// MAIN //\n\n/**\n* Returns an iterator which returns unique values according to a predicate function.\n*\n* @param {Iterator} iterator - input iterator\n* @param {Function} predicate - predicate function\n* @param {*} [thisArg] - evaluation context\n* @throws {TypeError} first argument must be an iterator protocol-compliant object\n* @throws {TypeError} second argument must be a function\n* @returns {Iterator} iterator\n*\n* @example\n* import array2iterator from '@stdlib/array-to-iterator' ;\n*\n* function predicate( a, b ) {\n*     return ( a !== b );\n* }\n*\n* var iter = iterUniqueBy( array2iterator( [ 1, 2, 1, 2, 4 ] ), predicate );\n*\n* var v = iter.next().value;\n* // returns 1\n*\n* v = iter.next().value;\n* // returns 2\n*\n* v = iter.next().value;\n* // returns 4\n*\n* var bool = iter.next().done;\n* // returns true\n*/\nfunction iterUniqueBy( iterator, predicate, thisArg ) {\n\tvar iter;\n\tvar hash;\n\tvar FLG;\n\tif ( !isIteratorLike( iterator ) ) {\n\t\tthrow new TypeError( format( '0Cy4J', iterator ) );\n\t}\n\tif ( !isFunction( predicate ) ) {\n\t\tthrow new TypeError( format( '0Cy2S', predicate ) );\n\t}\n\thash = [];\n\n\t// Create an iterator protocol-compliant object:\n\titer = {};\n\tsetReadOnly( iter, 'next', next );\n\tsetReadOnly( iter, 'return', end );\n\n\t// If an environment supports `Symbol.iterator`, make the iterator iterable:\n\tif ( iteratorSymbol && isFunction( iterator[ iteratorSymbol ] ) ) {\n\t\tsetReadOnly( iter, iteratorSymbol, factory );\n\t}\n\treturn iter;\n\n\t/**\n\t* Returns an iterator protocol-compliant object containing the next iterated value.\n\t*\n\t* @private\n\t* @returns {Object} iterator protocol-compliant object\n\t*/\n\tfunction next() {\n\t\tvar v;\n\t\tif ( FLG ) {\n\t\t\treturn {\n\t\t\t\t'done': true\n\t\t\t};\n\t\t}\n\t\twhile ( true ) {\n\t\t\tv = iterator.next();\n\t\t\tif ( v.done ) {\n\t\t\t\tFLG = true;\n\t\t\t\treturn v;\n\t\t\t}\n\t\t\tv = v.value;\n\t\t\tif ( isUnique( hash, v, predicate, thisArg ) ) {\n\t\t\t\thash.push( v );\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\treturn {\n\t\t\t'value': v,\n\t\t\t'done': false\n\t\t};\n\t}\n\n\t/**\n\t* Finishes an iterator.\n\t*\n\t* @private\n\t* @param {*} [value] - value to return\n\t* @returns {Object} iterator protocol-compliant object\n\t*/\n\tfunction end( value ) {\n\t\tFLG = true;\n\t\tif ( arguments.length ) {\n\t\t\treturn {\n\t\t\t\t'value': value,\n\t\t\t\t'done': true\n\t\t\t};\n\t\t}\n\t\treturn {\n\t\t\t'done': true\n\t\t};\n\t}\n\n\t/**\n\t* Returns a new iterator.\n\t*\n\t* @private\n\t* @returns {Iterator} iterator\n\t*/\n\tfunction factory() {\n\t\treturn iterUniqueBy( iterator[ iteratorSymbol ](), predicate, thisArg );\n\t}\n}\n\n\n// EXPORTS //\n\nexport default iterUniqueBy;\n"],"names":["isUnique","arr","v","predicate","thisArg","len","i","length","call","iterUniqueBy","iterator","iter","hash","FLG","isIteratorLike","TypeError","format","isFunction","setReadOnly","done","next","value","push","arguments","iteratorSymbol"],"mappings":";;sdAoDA,SAASA,EAAUC,EAAKC,EAAGC,EAAWC,GACrC,IAAIC,EACAC,EAGJ,IADAD,EAAMJ,EAAIM,OACJD,EAAI,EAAGA,EAAID,EAAKC,IACrB,IAAMH,EAAUK,KAAMJ,EAASH,EAAKK,GAAKJ,GACxC,OAAO,EAGT,OAAO,EAqCR,SAASO,EAAcC,EAAUP,EAAWC,GAC3C,IAAIO,EACAC,EACAC,EACJ,IAAMC,EAAgBJ,GACrB,MAAM,IAAIK,UAAWC,EAAQ,QAASN,IAEvC,IAAMO,EAAYd,GACjB,MAAM,IAAIY,UAAWC,EAAQ,QAASb,IAavC,OAXAS,EAAO,GAIPM,EADAP,EAAO,GACY,QAenB,WACC,IAAIT,EACJ,GAAKW,EACJ,MAAO,CACNM,MAAQ,GAGV,OAAe,CAEd,IADAjB,EAAIQ,EAASU,QACND,KAEN,OADAN,GAAM,EACCX,EAGR,GADAA,EAAIA,EAAEmB,MACDrB,EAAUY,EAAMV,EAAGC,EAAWC,GAAY,CAC9CQ,EAAKU,KAAMpB,GACX,OAGF,MAAO,CACNmB,MAASnB,EACTiB,MAAQ,MAnCVD,EAAaP,EAAM,UA8CnB,SAAcU,GAEb,GADAR,GAAM,EACDU,UAAUhB,OACd,MAAO,CACNc,MAASA,EACTF,MAAQ,GAGV,MAAO,CACNA,MAAQ,MApDLK,GAAkBP,EAAYP,EAAUc,KAC5CN,EAAaP,EAAMa,GA6DpB,WACC,OAAOf,EAAcC,EAAUc,KAAoBrB,EAAWC,MA5DxDO"}